import { supabase } from '@/lib/supabase';
const flagsBase = `${process.env.EXPO_PUBLIC_SUPABASE_URL}/functions/v1/admin-flags-p1`;
const evalBase = `${process.env.EXPO_PUBLIC_SUPABASE_URL}/functions/v1/flags-eval-p1`;
const configBase = `${process.env.EXPO_PUBLIC_SUPABASE_URL}/functions/v1/admin-config-p1`;
export async function p1ListFlags(){ const { data: session } = await supabase.auth.getSession(); const jwt = session.session?.access_token; const res = await fetch(flagsBase,{ headers: { ...(jwt?{Authorization:`Bearer ${jwt}`}:{}) } }); if(!res.ok) throw new Error('p1ListFlags failed'); return res.json(); }
export async function p1UpsertFlag(key:string, data:{enabled?:boolean;value?:any;rollout?:any}, elevationToken:string){ const { data: session } = await supabase.auth.getSession(); const jwt = session.session?.access_token; const res = await fetch(flagsBase,{ method:'POST', headers:{'Content-Type':'application/json', ...(jwt?{Authorization:`Bearer ${jwt}`}:{}) , 'x-admin-elevation':elevationToken}, body: JSON.stringify({ key, ...data }) }); if(!res.ok) throw new Error('p1UpsertFlag failed'); return res.json(); }
export async function p1DeleteFlag(key:string, elevationToken:string){ const { data: session } = await supabase.auth.getSession(); const jwt = session.session?.access_token; const url = new URL(flagsBase); url.searchParams.set('key', key); const res = await fetch(url.toString(),{ method:'DELETE', headers:{ ...(jwt?{Authorization:`Bearer ${jwt}`}:{}) , 'x-admin-elevation':elevationToken } }); if(!res.ok) throw new Error('p1DeleteFlag failed'); return res.json(); }
export async function p1EvalFlags(userId:string){ const url=new URL(evalBase); url.searchParams.set('user_id', userId); const res = await fetch(url.toString()); if(!res.ok) throw new Error('p1EvalFlags failed'); return res.json(); }
export async function p1ListConfig(){ const { data: session } = await supabase.auth.getSession(); const jwt = session.session?.access_token; const res = await fetch(configBase,{ headers: { ...(jwt?{Authorization:`Bearer ${jwt}`}:{}) } }); if(!res.ok) throw new Error('p1ListConfig failed'); return res.json(); }
export async function p1UpsertConfig(key:string, value:any, type:'json'|'string'|'number'|'bool', elevationToken:string){ const { data: session } = await supabase.auth.getSession(); const jwt = session.session?.access_token; const res = await fetch(configBase,{ method:'POST', headers:{'Content-Type':'application/json', ...(jwt?{Authorization:`Bearer ${jwt}`}:{}) , 'x-admin-elevation':elevationToken}, body: JSON.stringify({ key, value, type }) }); if(!res.ok) throw new Error('p1UpsertConfig failed'); return res.json(); }
export async function p1DeleteConfig(key:string, elevationToken:string){ const { data: session } = await supabase.auth.getSession(); const jwt = session.session?.access_token; const url=new URL(configBase); url.searchParams.set('key', key); const res = await fetch(url.toString(),{ method:'DELETE', headers:{ ...(jwt?{Authorization:`Bearer ${jwt}`}:{}) , 'x-admin-elevation':elevationToken } }); if(!res.ok) throw new Error('p1DeleteConfig failed'); return res.json(); }
