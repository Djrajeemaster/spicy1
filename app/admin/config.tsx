import React, { useEffect, useState } from 'react'; import { View, Text, TextInput, TouchableOpacity, StyleSheet, FlatList, Alert } from 'react-native'; import { listConfig, upsertConfig, deleteConfig } from '@/services/flagsService'; import { elevate } from '@/services/adminElevation';
type ConfigItem={key:string;value:any;type:'json'|'string'|'number'|'bool';updated_at?:string;updated_by?:string};
export default function ConfigScreen(){const [items,setItems]=useState<ConfigItem[]>([]);const [loading,setLoading]=useState(false);const [elev,setElev]=useState<string|null>(null);
const load=async()=>{try{setLoading(true);const res=await listConfig();setItems(res.items||[]);}catch(e:any){Alert.alert('Error',e.message||'Failed to load');}finally{setLoading(false);}}; useEffect(()=>{load();},[]);
const ensureElev=async()=>{if(elev) return elev; const {token}=await elevate(10); setElev(token); return token;};
const save=async(it:ConfigItem)=>{try{const token=await ensureElev();await upsertConfig(it.key,it.value,it.type,token);Alert.alert('Saved',it.key);}catch(e:any){Alert.alert('Error',e.message||'Failed');}};
const remove=async(key:string)=>{try{const token=await ensureElev();await deleteConfig(key,token);setItems(prev=>prev.filter(x=>x.key!==key));}catch(e:any){Alert.alert('Error',e.message||'Failed');}};
const addEmpty=()=>setItems(prev=>[{key:'app.setting',type:'json',value:{}},...prev]);
const ItemRow=({item}:{item:ConfigItem})=>(<View style={s.card}><TextInput value={item.key} onChangeText={(t)=>{setItems(prev=>prev.map(x=>x===item?{...x,key:t}:x));}} style={s.keyInput}/><Text style={s.label}>Type</Text><View style={s.row}>{(['json','string','number','bool'] as const).map(tp=>(<TouchableOpacity key={tp} style={[s.chip,item.type===tp&&s.chipOn]} onPress={()=>{setItems(prev=>prev.map(x=>x===item?{...x,type:tp}:x));}}><Text style={[s.chipTxt,item.type===tp&&s.chipTxtOn]}>{tp}</Text></TouchableOpacity>))}</View><Text style={s.label}>Value</Text><TextInput multiline value={item.type==='json'?JSON.stringify(item.value??{},null,2):String(item.value??'')} onChangeText={(t)=>{let v:any=t;if(item.type==='json'){try{v=JSON.parse(t||'{}');}catch{return;}}else if(item.type==='number'){v=Number(t||'0');}else if(item.type==='bool'){v=/^(true|1|yes)$/i.test(t);}setItems(prev=>prev.map(x=>x===item?{...x,value:v}:x));}} style={[s.input,{height:120,fontFamily:'monospace'}]}/><View style={s.row}><TouchableOpacity style={s.btn} onPress={()=>save(item)}><Text style={s.btnTxt}>Save</Text></TouchableOpacity><TouchableOpacity style={s.btnWarn} onPress={()=>remove(item.key)}><Text style={s.btnWarnTxt}>Delete</Text></TouchableOpacity></View></View>);
return(<View style={{flex:1,padding:12}}><Text style={s.h1}>App Config</Text><TouchableOpacity style={s.btnLite} onPress={addEmpty}><Text style={s.btnLiteTxt}>Add config</Text></TouchableOpacity><FlatList data={items} keyExtractor={(i)=>i.key} renderItem={ItemRow} refreshing={loading} onRefresh={load} contentContainerStyle={{paddingBottom:80}}/></View>);
}
const s=StyleSheet.create({h1:{fontSize:22,fontWeight:'800',color:'#111827',marginBottom:8},btnLite:{backgroundColor:'#f3f4f6',paddingHorizontal:12,paddingVertical:8,borderRadius:8,borderWidth:1,borderColor:'#e5e7eb',alignSelf:'flex-start',marginBottom:8},btnLiteTxt:{color:'#111827',fontWeight:'800'},card:{backgroundColor:'#fff',borderRadius:12,borderWidth:1,borderColor:'#e5e7eb',padding:12,marginBottom:10},keyInput:{backgroundColor:'#fff',borderColor:'#e5e7eb',borderWidth:1,borderRadius:8,paddingHorizontal:12,paddingVertical:10,marginBottom:8},label:{color:'#6b7280',marginTop:8,marginBottom:4},input:{backgroundColor:'#fff',borderColor:'#e5e7eb',borderWidth:1,borderRadius:8,paddingHorizontal:12,paddingVertical:10},row:{flexDirection:'row',alignItems:'center',gap:8,marginTop:8},chip:{paddingHorizontal:10,paddingVertical:6,borderRadius:999,borderWidth:1,borderColor:'#e5e7eb',backgroundColor:'#f9fafb'},chipOn:{backgroundColor:'#4f46e5',borderColor:'#4f46e5'},chipTxt:{color:'#111827',fontWeight:'700'},chipTxtOn:{color:'#fff'},btn:{backgroundColor:'#4f46e5',paddingHorizontal:14,paddingVertical:10,borderRadius:8,marginRight:8},btnTxt:{color:'#fff',fontWeight:'800'},btnWarn:{backgroundColor:'#fee2e2',paddingHorizontal:12,paddingVertical:10,borderRadius:8,borderWidth:1,borderColor:'#fecaca'},btnWarnTxt:{color:'#991b1b',fontWeight:'800'},});
