import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.45.4';
export type AdminContext = { supabase: ReturnType<typeof createClient>; userId: string; role: string; ip?: string|null; ua?: string|null; impersonatedUserId?: string|null; };
export function svcClient(){const url=Deno.env.get('SUPABASE_URL')!;const key=Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;return createClient(url,key);}
export function userClient(req:Request){const url=Deno.env.get('SUPABASE_URL')!;const key=Deno.env.get('SUPABASE_ANON_KEY')!;return createClient(url,key,{global:{headers:{Authorization:req.headers.get('Authorization')||''}}});}
async function fetchUserRole(s:any, uid:string){const {data,error}=await s.from('users').select('role').eq('id',uid).maybeSingle();if(error){console.error(error);return null;}return data?.role??null;}
export async function requireAdmin(req:Request){const svc=svcClient();const u=userClient(req);const {data:auth}=await u.auth.getUser();const uid=auth?.user?.id;if(!uid) throw new Response(JSON.stringify({error:'unauthorized'}),{status:401});const role=await fetchUserRole(svc,uid);if(!role||!['admin','superadmin','moderator'].includes(String(role).toLowerCase())) throw new Response(JSON.stringify({error:'forbidden'}),{status:403});const ip=req.headers.get('x-forwarded-for')||req.headers.get('cf-connecting-ip')||null;const ua=req.headers.get('user-agent')||null;return {supabase:svc,userId:uid,role,ip,ua,impersonatedUserId:null};}
export async function audit(ctx:AdminContext, log:{action:string;target_type:string;target_id?:string|null;diff_json?:Record<string,unknown>|null;}){const rec={actor_id:ctx.userId,actor_role:ctx.role,action:log.action,target_type:log.target_type,target_id:log.target_id??null,diff_json:log.diff_json??{},ip:ctx.ip||null,ua:ctx.ua||null,impersonated_user_id:ctx.impersonatedUserId||null};const {error}=await ctx.supabase.from('audit_log').insert(rec);if(error) console.error('audit insert error',error);}
