import { serve } from 'https://deno.land/std@0.224.0/http/server.ts';
import { requireAdmin, audit, svcClient } from '../_shared/admin-guard/index.ts';
function json(o:any,s=200){return new Response(JSON.stringify(o),{status:s,headers:{'content-type':'application/json'}});}
const VALID=['guest','user','verified_user','business','moderator','admin','super_admin'];
serve(async (req)=>{try{if(req.method!=='POST')return json({error:'method_not_allowed'},405);const ctx=await requireAdmin(req);const {user_id,role}=await req.json();if(!user_id||!role)return json({error:'missing_fields'},400);if(!VALID.includes(role))return json({error:'invalid_role'},400);const supa=svcClient();if(role!=='super_admin'){const {count}=await supa.from('users').select('id',{count:'exact',head:true}).eq('role','super_admin').neq('id',user_id);if((count??0)===0){const {data:current}=await supa.from('users').select('role').eq('id',user_id).maybeSingle();if(current?.role==='super_admin')return json({error:'cannot_demote_last_super_admin'},409);}}const {error:e1}=await supa.from('users').update({role}).eq('id',user_id);if(e1)return json({error:'db_update_failed'},500);try{const upd:any=await (supa as any).auth.admin.updateUserById(user_id,{app_metadata:{role}});if(upd.error) console.warn('app_metadata mirror warning:',upd.error);}catch(e){console.warn('app_metadata mirror failed:',e);}await audit(ctx,{action:'admin.set_role',target_type:'user',target_id:user_id,diff_json:{role}});return json({ok:true});}catch(e){if(e instanceof Response) return e;console.error('admin-set-role error',e);return json({error:'internal'},500);}});
